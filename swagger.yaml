openapi: 3.0.3

info:
  title: Conversational Chatbot API
  description: API for accessing the conversational chatbot
  version: 0.x

servers:
  - url: 'http://uat-aios-api-01.aws.tankatalk.com:8080/tankabot'
    description: UAT server

paths:
  /health:
    get:
      summary: Health check.
      responses:
        '202':
          description: Busy
        '200':
          description: OK

  /summary:
    post:
      summary: Summarize a text
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mode:
                  type: string
                  enum: [summary, digest, title, conclusion]
                  description: Mode of summarization. One of
                  required: false
                  default: summary
                  example: summary
                language:
                  type: string
                  description: ISO-639 two-character language code
                  default: null
                  example: "en"
                numTitles:
                  type: integer
                  description: When the "mode" property is "title", specify how many recommendations to receive
                  required: false
                  default: 3
                text:
                  type: string
                  default: The text to be summarized
                  required: true
                  example: "Tianqiao Chen\n@Vincent 朱赟  volunteer 那个功能本身可以是调性的一个重要部分\n21:15\nTianqiao Chen\n调性并不是写写画画，有的时候可以从宣传小的贴心的功能开始\n21:16\nTianqiao Chen\n比方说我们的自动翻译，强调了人和人之间交流不应该有隔阂\n21:16\nTianqiao Chen\n比方说volunteer： 善良有爱心有责任心\n21:17\nTianqiao Chen\n@Evangeline Wang 如果你要好一些功能的调性，不要上来就说这个不对要改正那个\n21:17\nTianqiao Chen\n而是实实在在的增加一些小东西\n21:18\nTianqiao Chen\n而不要急着去改变一个东西。只要改变都会涉及到历史问题\n21:19\nTianqiao Chen\n@Jonathan 比方说我的那个👍，能不能就比所有竞品大，不但体现出潮，而且体现出简单深刻里面的简单这个特点！\n21:19\nTianqiao Chen\n千言万语，一个赞就够了，这个赞岂不是位置要更大一些？\n21:20\nTianqiao Chen\n@Evangeline Wang 这就是软装，这就是调性，多去找一些这些细节不断提升，拿出一个简易表出来\n22:25\nJonathan\nTianqiao Chen\n@Jonathan 比方说我的那个👍，能不能就比所有竞品大，不但体现出潮，而且体现出简单深刻里面的简单这个特点！\n\n陈总这么一说，我有了创意，后面做成demo动效给陈总和大家看。\n22:49\nTianqiao Chen\n呵呵，以后不要等我“这么一说“\n22:50\nJonathan\n哦😄\n23:34\nEvangeline Wang\nTianqiao Chen\n@Evangeline Wang 这就是软装，这就是调性，多去找一些这些细节不断提升，拿出一个简易表出来\n\n明白，我明白陈总的意思了。我把值得优化的点逐个整理出来\n12/1/2022 7:43\nTianqiao Chen\n总结一下你想在tanka 用户里放的label，比方说乐于助人，有责任心\n7:44\nTianqiao Chen\n然后去找地方体现出来\n16:35\nEvangeline Wang\n明白"
      responses:
        200:
          description: Summary returned
          content:
            application/json:
              schema:
                type: string
                description: Summary of the text
                example: "Tianqiao Chen suggested that when it comes to adjusting the tone of a feature, it is better to start with small and thoughtful functions rather than immediately changing something. He gave an example of automatic translation, emphasizing that communication between people should not have any barriers. He also suggested that volunteer should be associated with kindness, love, and responsibility. He further suggested that when improving a feature, one should focus on adding small details instead of making drastic changes. Lastly, he concluded by suggesting to summarize the labels that should be placed in the Tanka user, such as being helpful and responsible."
        400:
          description: The request failed and this is the error messages
          content:
            application/json:
              schema:
                type: object
                required: [error]
                properties:
                  error:
                    type: string
                    description: The error message
                    example:
                      - "Environment OPENAI_KEY not defined"

  /persona:
    post:
      summary: Creates a persona
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name the bot
                  required: false
                  default: "Bot"
                  example: "Alice"
                persona:
                  type: array
                  items:
                    type: string
                  description: List the facts that describes the bot's persona
                  required: false
                  default: []
                  example: ["I am a woman", "I live in New York City", "I like cheese", "I like to swim"]
                model:
                  type: string
                  description: What chatbot model to use
                  required: false
                  default: "bb2-1B"
                  example: "bb2-1B"

      responses:
        200:
          description: New persona information
          content:
            application/json:
              schema:
                type: object
                required: [version, presona, name, model]
                properties:
                  vesion:
                    type: string
                    description: Server version
                    example: "0.1.0"
                  persona:
                    type: string
                    description: ID of the new persona.  This shall be used to chat and access info about the persona latter.
                    example: "634999f76c4ec20d51bebad2"
                  name:
                    type: string
                    description: The name of the bot
                    example: "Alice"
                  model:
                    type: string
                    description: The actual bot model used
                    example: "facebook/blenderbot-1B-distill"
        400:
          description: The request failed and this is the error messages
          content:
            application/json:
              schema:
                type: object
                required: [error]
                properties:
                  error:
                    type: string
                    description: The error message
                    example:
                      - "Unknown chat bot model {botModel}"

  /persona/{personaId}:
    get:
      summary: Gets the persona description back
      responses:
        200:
          description: persona description
          content:
            application/json:
              schema:
                type: object
                required: [version, presona, name, model]
                properties:
                  vesion:
                    type: string
                    description: Server version
                    example: "0.1.0"
                  persona:
                    type: array
                    items:
                      type: string
                    description: List the facts that describes the bot's persona
                    example: ["I am a woman", "I live in New York City", "I like cheese", "I like to swim"]
                  name:
                    type: string
                    description: The name of the bot
                    example: "Alice"
                  model:
                    type: string
                    description: The name of the bot model
                    example: "facebook/blenderbot-1B-distill"
        400:
          description: The request failed and this is the error messages
          content:
            application/json:
              schema:
                type: object
                required: [ error ]
                properties:
                  error:
                    type: string
                    description: The error message
                    example:
                      - "persona {personaId} not found"

    delete:
      description: Delete the presona
      responses:
        200:
          description: The persona is deleted successfully
        202:
          description: The persona does not exist

  /chat/{personaId}:
    post:
      summary: Chat to the bot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                utterance:
                  type: string
                  description: What to say to the bot
                  required: true
                  example: "Hi.  How are you doing?"
                reset:
                  type: boolean
                  description: Make the bot forget all the previous conversation
                  required: false
                  example: flase
      responses:
        200:
          description: The reply from the bot
          content:
            application/json:
              schema:
                type: object
                required: [version, presona, name, model]
                properties:
                  vesion:
                    type: string
                    description: Server version
                    example: "0.1.0"
                  persona:
                    type: string
                    description: ID of the persona.
                    example: "634999f76c4ec20d51bebad2"
                  name:
                    type: string
                    description: The name of the bot
                    example: "Alice"
                  reply:
                    type: string
                    description: The actual bot model used
                    example: " I am doing well.  Just got back from swimming.  What are you up to?"
        400:
          description: The request failed and this is the error messages
          content:
            application/json:
              schema:
                type: object
                required: [ error ]
                properties:
                  error:
                    type: string
                    description: The error message
                    example:
                      - "persona {personaId} not found"

    get:
      summary: Gets the history of the conversation
      responses:
        200:
          description: persona description
          content:
            application/json:
              schema:
                type: object
                required: [version, presona, name, model]
                properties:
                  vesion:
                    type: string
                    description: Server version
                    example: "0.1.0"
                  persona:
                    type: string
                    description: ID of the persona.
                    example: "634999f76c4ec20d51bebad2"
                  name:
                    type: string
                    description: The name of the bot
                    example: "Alice"
                  conversation:
                    type: array
                    items:
                      type: string
                    description: List the previous utterances of this conversation
                    example: [
                        "You: Hi.  How are you doing?",
                        "June:  I am doing well.  Just got back from swimming.  What are you up to?",
                        "You: How nice.  Do you do that everyday?",
                        "June:  I do.  It is a great way to stay in shape.  Where do you live?",
                        "You: I live in the Bay Area.  It is hard to find an affortable gym with good swimming pools here ",
                        "June:  I know what you mean.  There are a lot of gyms in the bay area."
                    ]

        400:
          description: The request failed and this is the error messages
          content:
            application/json:
              schema:
                type: object
                required: [ error ]
                properties:
                  error:
                    type: string
                    description: The error message
                    example:
                      - "persona {personaId} not found"
